     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; (a*2+b/2+e)/(c-d); a-word; b,c,d-byte; e-doubleword
    14 00000000 0500                         a dw 5    ; a - word 
    15 00000002 0A                          b db 10    ; b - byte    
    16 00000003 03                          c db 3     ; c - byte 
    17 00000004 02                          d db 2     ; d - byte 
    18 00000005 14000000                    e dd 20    ; e - doubleword
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                         ; Load a into AX register
    24 00000000 66A1[00000000]              mov ax, [a]
    25                                  
    26                                      ; Multiply a by 2
    27 00000006 66D1E0                      shl ax, 1
    28 00000009 6689C3                      mov bx, ax
    29                                      
    30                                  
    31                                      ; Load b into AL
    32 0000000C A0[02000000]                mov al, [b]
    33 00000011 660FB6C0                    movzx ax, al
    34                                      
    35                                  
    36                                      ; Divide AL by 2 using div
    37 00000015 F635[02000000]              div byte [b] ; al - cat, ah -rest
    38 0000001B 0FB6C0                      movzx eax, al
    39                                  
    40                                  
    41                                      ; Load e into edx
    42 0000001E 8B15[05000000]              mov edx, [e]
    43                                  
    44                                      ; Perform the addition of e and AX
    45 00000024 01D0                        add eax, edx
    46                                      
    47                                      ;eax =  (a*2+b/2+e)
    48                                  
    49                                      ; Load c into AL
    50 00000026 8A0D[03000000]              mov cl, [c]
    51                                  
    52                                      ; Load d into BL
    53 0000002C 8A1D[04000000]              mov bl, [d]
    54                                  
    55                                      ; Subtract d from c
    56 00000032 28D9                        sub cl, bl
    57                                  
    58                                      ; Divide EAX by CL using div
    59                                      ;eax/cl
    60                                      ;dx:ax / cx
    61 00000034 50                          push eax
    62 00000035 6658                        pop ax
    63 00000037 665A                        pop dx
    64                                      
    65 00000039 660FB6C9                    movzx cx, cl
    66                                      
    67 0000003D 66F7F1                      div cx ; dx:ax / cx = ax - cat, dx- rest
    68                                      
    69                                      
    70                                      
    71                                          ; exit(0)
    72 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    73 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
