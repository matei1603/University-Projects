     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                    ;4. if f % 3 = 0 then e = a*(4+b) else e = 23-(-a)
    14 00000000 0A                          a db 10
    15 00000001 0C00                        b dw 12
    16 00000003 00000000                    e dd 0
    17 00000007 06                          f db 6
    18                                      ; cmp - compare
    19                                      ; cmp op1, op2
    20                                      ; cel putin un op sa fie reg sau constanta
    21                                      ; aceasi diminesiune/acelasi tip de data
    22                                      
    23                                      ; cmp este urmat de o instr de salt conditionat
    24                                      ; J - jump 
    25                                      ; C - conditie data de tabel 
    26                                      ; JC este urmat de o eticheta care contine codul de executat daca este ideplinita conditia
    27                                  
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31 00000000 0FB605[07000000]            movzx eax, byte[f] 
    32 00000007 BA00000000                  mov edx,0     
    33 0000000C BB03000000                  mov ebx, 3            
    34 00000011 F7F3                        div ebx               
    35 00000013 83FA00                      cmp edx, 0            ; Compare the remainder with 0
    36 00000016 7402                        je ramura_then
    37 00000018 7523                        jne else_branch      
    38                                      
    39                                      ; if f % 3 == 0
    40                                      ramura_then:
    41 0000001A 668B1D[01000000]            mov bx, word[b]
    42 00000021 6683C304                    add bx, 4
    43 00000025 660FBE05[00000000]          movsx ax,byte[a]
    44 0000002D 66F7EB                      imul bx;dx:ax=bx*ax
    45 00000030 6652                        push dx
    46 00000032 6650                        push ax
    47 00000034 5B                          pop ebx
    48 00000035 891D[03000000]              mov [e], ebx
    49 0000003B EB0F                        jmp end_if
    50                                  
    51                                  else_branch:
    52                                      ; if f % 3 != 0
    53 0000003D 0FBE05[00000000]            movsx eax, byte [a] ;byte to dword
    54 00000044 83C002                      add eax, 2
    55 00000047 A3[03000000]                mov [e], eax
    56                                  
    57                                  end_if:
    58                                   
    59 0000004C FF35[03000000]              push dword [e]
    60 00000052 83C408                      add esp, 8    
    61                                  
    62                                      ; exit(0)
    63 00000055 FF15[00000000]              call dword [exit]  ; call exit to terminate the program
