     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 050A0F1B03                  A db 5, 10, 15, 27, 3
    14                                      ls equ ($-A)
    15 00000005 <res 00000005>              B resb ls
    16 0000000A 00                          copy db 0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ;construirea string-ului B cu valori div cu 3 din A
    22                                          
    23 00000000 BE[00000000]                    mov esi, A
    24 00000005 BF[05000000]                    mov edi, B
    25 0000000A B905000000                      mov ecx, ls
    26 0000000F FC                              cld ; parcurgerea sirului
    27                                          repeta:
    28 00000010 AC                                  LODSB ; mov al, byte[A+esi], esi= esi+1
    29 00000011 A2[0A000000]                        mov [copy], al
    30 00000016 660FBEC0                            movsx ax, al 
    31 0000001A B303                                mov bl, 3
    32 0000001C F6FB                                idiv bl ; al= C, ah= R
    33 0000001E A0[0A000000]                        mov al, [copy]
    34 00000023 80FC00                              cmp ah, 0
    35 00000026 7402                                je diviz
    36 00000028 7503                                jne nediviz
    37                                                  diviz:
    38 0000002A AA                                          STOSB 
    39 0000002B EB00                                    jmp final
    40                                                  
    41                                                  nediviz:
    42                                                      
    43                                                  final:
    44 0000002D E2E1                            loop repeta
    45                                                      
    46                                      
    47                                          ; exit(0)
    48 0000002F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 00000031 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
