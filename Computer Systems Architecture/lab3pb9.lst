     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf, and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 05                          a db 5
    14 00000001 03                          b db 3
    15 00000002 0100                        c dw 1
    16 00000004 0A000000                    e dd 10
    17                                      
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                  ;9. (a-b+c*128)/(a+b)+e; a,b-byte; c-word; e-doubleword;
    21                                      start:
    22                                          ; a-b+c*128
    23 00000000 A0[00000000]                    mov al, [a]
    24 00000005 2A05[01000000]                  sub al, [b]
    25 0000000B 88C3                            mov bl,al
    26 0000000D 66A1[02000000]                  mov ax,[c]
    27 00000013 66B98000                        mov cx,128
    28 00000017 66F7E9                          imul cx
    29                                          
    30 0000001A 6652                            push dx
    31 0000001C 6650                            push ax
    32 0000001E 58                              pop eax
    33 0000001F 0FBEDB                          movsx ebx,bl
    34 00000022 01D8                            add eax,ebx
    35                                  
    36                                          ; save the result in edx:eax
    37 00000024 BA00000000                      mov edx, 0
    38 00000029 0FBE1D[00000000]                movsx ebx, byte [a]
    39 00000030 0FBE0D[01000000]                movsx ecx, byte [b]
    40 00000037 01CB                            add ebx, ecx
    41 00000039 F7FB                            idiv ebx
    42 0000003B 0305[04000000]                  add eax, [e]
    43                                  
    44                                   
    45                                  
    46                                          ; exit(0)
    47 00000041 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 00000043 FF15[00000000]                  call    [exit]       ; call exit to terminate the program.
